{% extends '../layouts/app.twig' %}

{% block content %}

    <div class="container" id="vm" xmlns:v-on="http://www.w3.org/1999/xhtml">
        <div class="row">
            <div class="col-md-8">
                {% include '../partials/matrix.twig' %}
            </div>

            {% verbatim %}
            <div class="col-md-4">
                <div class="input-form needs-validation">
                    <div class="form-label-group row">
                        <input type="number" min="1" :max="dim" id="r" class="form-control" placeholder="Value of r"
                               v-model.number="r" required autofocus
                               v-on:keyup.enter="draw"
                               v-on:focus="focused($event)"
                               v-on:blur="blurred"
                        >
                        <label for="r">Value of r</label>
                        <div class="invalid-feedback">r must be a positive number less than 21</div>
                        <div class="valid-feedback">Now click <b>Draw</b> or press <b>Enter</b></div>
                    </div>

                    <div class="form-group row">
                        <button class="btn btn-lg btn-primary btn-block" type="button" v-on:click="draw">Draw</button>
                    </div>

                </div>

                <div class="d-inline-block p-3 bg-primary text-white lead">
                    Or click anywhere in the matrix to draw an arc of corresponding radius.
                </div>
            </div>
            {% endverbatim %}
        </div>

    </div>

{% endblock %}

{% block script %}
    <script>
        (function () {
            let $form, $htmlBody;
            $(document).ready(function () {
                $form = $('.needs-validation');
                $htmlBody = $('html, body');
            });

            new Vue({
                el: '#vm',
                data: {
                    plane: [[]],
                    r: undefined,
                    dim: 20,
                    $form: undefined
                },
                methods: {
                    draw: function () {
                        if (this.r <= 0) return;

                        let x = 0;
                        let y = this.r;
                        let d = 3 - 2 * y;

                        this.resetPlane();
                        this.plane[this.dim - y][x] = 1;
                        if (this.r === 1)
                            return;

                        while (x < y) {
                            if (d < 0) {
                                d = d + 4 * x + 6;
                            } else {
                                d = d + 4 * (x - y);
                                y--;
                            }
                            x++;
                            this.plane[this.dim - y][x] = 1;
                            console.log(d, x, y);
                        }

                        // console.log('--------------------');
                        //
                        // x = this.r;
                        // y = 0;
                        // d = 3 - 2 * x;
                        // while (x > y) {
                        //     if (d < 0) {
                        //         d = d + 4 * y + 6;
                        //     } else {
                        //         d = d + 4 * (y - x);
                        //         x--;
                        //     }
                        //     y++;
                        //     this.plane[this.dim - y][x-1] = 1;
                        //
                        //     console.log(d, y, x);
                        // }

                        $htmlBody.animate({
                            scrollTop: $("#" + (this.r + 1)).offset().top
                        }, 500);
                    },
                    cellClicked: function (row) {
                        this.r = row;
                        this.draw();
                    },
                    resetPlane: function () {
                        this.plane = [];
                        for (let i = 0; i < 20; i++)
                            this.plane.push(new Array(20).fill(0));
                    },
                    focused: function (e) {
                        $form.addClass('was-validated');
                        e.currentTarget.select();
                    },
                    blurred: function () {
                        $form.removeClass('was-validated');
                    }
                },
                created() {
                    this.resetPlane();
                }
            })
        })();
    </script>
{% endblock %}